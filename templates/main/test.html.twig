{% extends 'layouts/base.html.twig' %}

{% block title %} - {{ "title.typing.test"|trans }}{% endblock %}

{% block meta %}
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="pragma" content="no-cache">
{% endblock %}

{% block one_row_content %}
    <div class="preloader">
        <section>
            <div class='sk-fading-circle'>
                <div class='sk-circle sk-circle-1'></div>
                <div class='sk-circle sk-circle-2'></div>
                <div class='sk-circle sk-circle-3'></div>
                <div class='sk-circle sk-circle-4'></div>
                <div class='sk-circle sk-circle-5'></div>
                <div class='sk-circle sk-circle-6'></div>
                <div class='sk-circle sk-circle-7'></div>
                <div class='sk-circle sk-circle-8'></div>
                <div class='sk-circle sk-circle-9'></div>
                <div class='sk-circle sk-circle-10'></div>
                <div class='sk-circle sk-circle-11'></div>
                <div class='sk-circle sk-circle-12'></div>
            </div>
        </section>
    </div>
    <div class="test-wrapper" id="test-wrapper">
{#        <button id="myBtn">Open</button>#}
        <div class="test-settings-container" id="test-settings-container">
            <label for="test-duration">{{ "Test duration"|trans }}: </label>
            <select name="test-duration" id="test-duration" class="form-select">
                <option value="1" {% if app.request.get('duration') == 1 %} selected {% endif %}>1 {{ "minute"|trans }}</option>
                <option value="3" {% if app.request.get('duration') == 3 %} selected {% endif %}>3 {{ "minutes"|trans }}</option>
                <option value="5" {% if app.request.get('duration') == 5 %} selected {% endif %}>5 {{ "minutes"|trans }}</option>
            </select>
            <label for="test-language">{{ "Language"|trans }}</label>
            <select name="test-language" id="test-language" class="form-select">
                {% for language in languages %}
                    <option value="{{ language.id }}"
                            {% if app.request.query.get('language') == language.id %}
                                selected
                            {% elseif app.request.query.get('language') is null and app.user.defaultLanguage.id ?? -1 == language.id %}
                                selected
                            {% endif %}
                    >{{ language.title }}</option>
                {% endfor %}
            </select>
            <div class="right">
                <span id="words-per-minute">
                    <b>{{ "Words per minute"|trans }}:</b> <span id="count-words-per-minute">0</span>
                </span> |
                    <span id="chars-per-minute">
                    <b>{{ "Chars per minute"|trans }}:</b> <span id="count-chars-per-minute">0</span>
                </span> |
                    <span id="typing-accuracy">
                    <b>{{ "Typing accuracy"|trans }}:</b> <span id="count-typing-accuracy">0</span>%
                </span> |
                    <span id="timer">
                    <b>{{ "Time left"|trans }}:</b> <span id="timer-left"></span>s
                </span>
            </div>
            <hr>
        </div>
        <div class="test-container">
            <input type="hidden" name="text-id" id="text-id" value="undefined">
            <div class="test-text-display" id="test-text-display">
                <span id="original-text"></span>
            </div>
            <p class="tesxxxx"></p>
            <textarea name="test-input" id="test-input" cols="146" rows="10" style="opacity: 0; width: 0px; height: 0px;"></textarea>
            <div class="test-utils-container">
                <div class="test-fingers-box" style="float: left">
                    <div class="hand-box">
                        <div class="hand-border"></div>
                        <div class="hand left-hand">
                            <div class="finger pinky" data-finger="1"></div>
                            <div class="finger ring" data-finger="2"></div>
                            <div class="finger middle" data-finger="3"></div>
                            <div class="finger index" data-finger="4"></div>
                            <div class="finger thumb" data-finger="5"></div>
                        </div>
                    </div>
                    <div class="hand-box">
                        <div class="hand-border"></div>
                        <div class="hand right-hand">
                            <div class="finger thumb" data-finger="5"></div>
                            <div class="finger index" data-finger="6"></div>
                            <div class="finger middle" data-finger="7"></div>
                            <div class="finger ring" data-finger="8"></div>
                            <div class="finger pinky" data-finger="9"></div>
                        </div>
                    </div>
                </div>
                <div class="test-keyboard-box" style="float: right">
                    {{ keyboard|raw }}
                </div>
            </div>
            <div class="note text-right" style="margin-top: -10px">
                <p>*{{ "You could change test options in"|trans }} <a href="{{ path('profileSettings') }}" class="link">{{ "profile settings"|trans }}</a>.</p>
            </div>
        </div>
        <div class="test-container-error text-center">
            <h1>{{ "Text not found, please try again later"|trans }}</h1>
            <a href="https://t.me/zikbert77" target="_blank" class="link">{{ "Report a problem"|trans }}</a>
        </div>
    </div>

    <div id="fingerPreviewModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close finger-preview-close">&times;</span>
                <h2>{{ "Before you start"|trans }}</h2>
            </div>
            <div class="modal-body text-center">
                <p>
                    <b>{{ "Place your fingers as on picture below"|trans }}</b>
                </p>
                <img src="{{ asset('img/finger-position.jpg') }}" style="width: 100%" alt="">
            </div>
            <div class="content" style="text-align: right">
                <label>
                    {{ "Show this tooltip before start"|trans }}
                    <input type="checkbox" name="disable-finger-preview" checked>
                </label>
            </div>
            <hr>
            <div class="modal-footer">
                <button class="btn close finger-preview-close right">Ok</button>
            </div>
        </div>
    </div>

    <div id="testStatModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close test-stat-modal-close">&times;</span>
                <h2>{{ "Your test result"|trans }}</h2>
            </div>
            <div class="modal-body">
                <p>
                    <b>{{ "Words per minute"|trans }} (WPM):</b> <span id="modal-test-result-wpm">0</span>
                </p>
                <p>
                    <b>{{ "Chars per minute"|trans }} (CPM):</b> <span id="modal-test-result-cpm">0</span>
                </p>
                <p>
                   <b>{{ "Typing accuracy"|trans }}:</b> <span id="modal-test-result-accuracy">100</span>%
                </p>
                <p id="too-low-test-history" style="display: none">
                    {{ "Keep going, progress statistic will appear after more tests will be passed"|trans }}.
                </p>
                <div class="stat">
                    {% if app.user %}
                        <canvas id="lastStatChart" height="100"></canvas>

                        <span style="font-size: 14px;">
                        {{ "View advanced statistic in the"|trans }} <a href="{{ path('profileIndex') }}" class="link">{{ "in.the.profile"|trans }}</a>.
                    </span>
                    {% else %}
                        <p>
                            {{ "If you want to view your typing statistic, please"|trans }}
                            <a href="{{ path('app_login') }}" class="link">{{ "please.log.in"|trans }}</a> {{ "or"|trans }}
                            <a href="{{ path('register') }}" class="link">{{ "please.register"|trans }}</a>
                            .
                        </p>
                    {% endif %}
                </div>
            </div>
            <hr>
            <div class="modal-footer">
                <button class="btn close test-stat-modal-close right">Ok</button>
            </div>
        </div>
    </div>
{% endblock %}

{% block two_rows %}{% endblock %}

{%block scripts %}
    <link rel="stylesheet" href="{{ asset('chartjs/Chart.css') }}">
    <script src="{{ asset('chartjs/Chart.js') }}"></script>
    <script src="{{ asset('js/test.js') }}"></script>
    <script>
        $(document).ready(function () {
            let lettersCount = 0;
            let passedWords = 0;
            let mistakes = 0;
            let isTimerStarted = false;
            let positionToScrollDown = 195 + {% if true or (app.user and app.user.isPremium) %}0{% else %}170{% endif %};
            let positionToScrollUp = 132 + {% if true or (app.user and app.user.isPremium) %}0{% else %}170{% endif %};
            let scrollPx = 64;
            let blockCompare = false;
            let $testTextDisplayBox = $("#test-text-display");
            let $countWordsPerMinuteBox = $("span#count-words-per-minute");
            let $countCharsPerMinuteBox = $("span#count-chars-per-minute");
            let $countAccuracyBox = $("span#count-typing-accuracy");
            let $timerLeftBox = $('#timer-left');
            let $testDurationBox = $("select#test-duration");
            let $testLanguageBox = $("select#test-language");
            let $originalTextBox = $("#original-text");

            let fingerPreviewModal = $("#fingerPreviewModal");
            let fingerPreviewModalCloseSpan = $(".finger-preview-close");

            let testStatModal = $("#testStatModal");
            let testStatModalCloseSpan = $(".test-stat-modal-close");

            let btn = $("#myBtn");
            btn.click(function () {
                showTestStatModal()
            });

            {% if app.user and app.user.showTooltips %}
                showFingerPreviewModal();
            {% endif %}
            fingerPreviewModalCloseSpan.click(function () {
                hideFingerPreviewModal();
            });

            testStatModalCloseSpan.click(function () {
                hideTestStatModal();
            });

            $testDurationBox.change(function () {
                insertParam('duration', $(this).val());
                window.location.href;
            });

            $testLanguageBox.change(function () {
                insertParam('language', $(this).val());
                window.location.href;
            });

            $(window).on('click', function(event){
                if (event.target.id === 'testStatModal') {
                    hideTestStatModal();
                }
            });

            initText();
            focusOnTextarea();
            $timerLeftBox.text($testDurationBox.val() * 60);

            $testDurationBox.on('change', function () {
                $timerLeftBox.text($(this).val() * 60);
            });

            $(".test-text-display").click(function () {
                focusOnTextarea();
            });

            $("textarea#test-input").keydown(function(e) {
                switch (e.keyCode) {
                    case 8:  // Backspace
                        backspaceAction($(this).val());
                        break;
                    default:
                        break;
                }
            });

            $("textarea#test-input").on('input', function () {
                if (!isTimerStarted) {
                    startTimer();
                }

                $("textarea#test-input").keydown(function(e) {
                    switch (e.keyCode) {
                        case 8:  // Backspace
                            blockCompare = true;
                            break;
                        default:
                            blockCompare = false;
                            break;
                    }
                });
                compareInputWithText($(this).val());
            });

            function compareInputWithText(input) {
                $originalTextBox.find('span.letter').removeClass('current');
                let inputIndex = input.length - 1;
                if (inputIndex < 0) {
                    inputIndex = 0;
                    let $originalLetter = $originalTextBox.find('span.letter-' + inputIndex);
                    $originalLetter.addClass('current');
                } else {
                    let $originalLetter = $originalTextBox.find('span.letter-' + inputIndex);
                    let originalChar = $originalLetter.data('letter').toString();
                    let inputChar = input.charAt(inputIndex).toString();

                    if (originalChar === inputChar) {
                        //set letter style pass
                        $originalLetter.removeClass('current');
                        $originalLetter.addClass('pass');
                        $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '+');
                    } else {
                        //set letter style wrong
                        if (!$originalLetter.hasClass('wrong')) {
                            mistakes++;
                        }
                        $originalLetter.removeClass('current');
                        $originalLetter.addClass('wrong');
                        $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '-');
                    }

                    if ($originalLetter.hasClass('end-word')) {
                        if (blockCompare) {
                            blockCompare = false;
                        } else {
                            updatePassedWords('+');
                        }
                    }

                    calculateCPM(inputIndex);
                    calculateAccuracy(inputIndex);

                    let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));
                    $nextLetter.addClass('current');

                    scrollTestDisplayBox($nextLetter.position().top);
                    highlightKeyOnKeyboard($nextLetter.data('letter'));
                }
            }

            function scrollTestDisplayBox(letterPosition) {
                if (letterPosition > positionToScrollDown) {
                    $testTextDisplayBox.scrollTop($testTextDisplayBox.scrollTop() + scrollPx)
                } else if (letterPosition < positionToScrollUp) {
                    $testTextDisplayBox.scrollTop($testTextDisplayBox.scrollTop() - scrollPx)
                }
            }

            function highlightKeyOnKeyboard(letter) {
                if (!$.isNumeric(letter)) {
                    letter = letter.replace(/'/g, "\\'");
                }
                $(".key-current").removeClass('key-current');
                $(".shift").removeClass('shift');

                let key = $(".test-keyboard-box").find(`[data-key='${!$.isNumeric(letter) ? letter.toLowerCase() : letter}']`);
                if (key.length === 0) {
                    let shiftKey = $(".test-keyboard-box").find(`[data-shift-key='${letter}']`);
                    if (shiftKey.length !== 0) {
                        shiftKey.addClass('key-current');
                        highlightFinger(shiftKey.data('finger'));
                        highlightShift(shiftKey.data('shift'));
                    }
                } else {
                    highlightFinger(key.data('finger'));
                    key.addClass('key-current');

                    if (!$.isNumeric(letter) && isShiftKeyShouldBeHighlighted(letter) && letter === letter.toUpperCase()) {
                        highlightShift(key.data('shift'));
                        highlightShift(key.data('shift'));
                    }
                }
            }

            function isShiftKeyShouldBeHighlighted(letter) {
                let forbiddenShiftHighlight = [' ', "\n", "\r", '/', '.', ',', '[', ']', ';', "\\'"];
                if (forbiddenShiftHighlight.includes(letter)) {
                    return false;
                }

                return true;
            }

            function highlightShift(shiftId) {
                let shift = $(".test-keyboard-box").find(`[id='${shiftId}']`);
                shift.addClass('shift');

                highlightFinger(shift.data('finger'), true);
            }

            function highlightFinger(index, isShift = false) {
                $('.finger').removeClass('shift');

                let finger = $(".test-fingers-box").find(`[data-finger='${index}']`);
                if (!isShift) {
                    $('.finger').removeClass('current');
                    finger.addClass('current');
                } else {
                    finger.addClass('shift');
                }
            }

            function backspaceAction(input) {
                let inputIndex = input.length - 1;
                inputIndex = inputIndex < 0 ? 0 : inputIndex;
                let $currentLetter = $originalTextBox.find('span.letter-' + inputIndex);
                let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));

                if ($currentLetter.hasClass('end-word')) {
                    updatePassedWords('-');
                    blockCompare = true;
                }

                //Remove all current letter classes
                if ($currentLetter.hasClass('pass')) {
                    $currentLetter.removeClass('pass');
                }

                if ($currentLetter.hasClass('current')) {
                    $currentLetter.removeClass('current');
                }

                if ($currentLetter.hasClass('wrong')) {
                    mistakes--;
                    $currentLetter.removeClass('wrong');
                }

                //Remove all next letter classes
                if ($nextLetter.hasClass('current')) {
                    $nextLetter.removeClass('current');
                }

                if ($nextLetter.hasClass('wrong')) {
                    $nextLetter.removeClass('wrong');
                }

                //Set previous letter as current
                $currentLetter.addClass('current');
            }

            function startTimer() {
                isTimerStarted = true;

                let _Seconds = parseInt($timerLeftBox.text());
                interval = setInterval(function() {
                    if (_Seconds > 0) {
                        _Seconds--;
                        $timerLeftBox.text(_Seconds);
                        calculateWPM();
                    } else {
                        stopTimer(interval);
                        $("span#modal-test-result-wpm").text($countWordsPerMinuteBox.text());
                        $("span#modal-test-result-cpm").text($countCharsPerMinuteBox.text());
                        $("span#modal-test-result-accuracy").text($countAccuracyBox.text());
                        showTestStatModal();
                    }
                }, 1000);

                setTimeout(stopTimer, 10000);
            }

            function stopTimer(interval) {
                clearInterval(interval);
            }

            function showFingerPreviewModal() {
                $("textarea#test-input").blur();
                fingerPreviewModal.css("display", "block");
            }

            function hideFingerPreviewModal() {
                fingerPreviewModal.css("display", "none");
                focusOnTextarea()
            }

            function showTestStatModal() {
                $("textarea#test-input").blur();
                saveResult();
                getTestHistoryForUser();
                testStatModal.css("display", "block");
            }

            function hideTestStatModal() {
                testStatModal.css("display", "none");
                window.location.reload();
            }

            function getPassedTime() {
                let leftTime = $timerLeftBox.text();
                let totalTime = $testDurationBox.val() * 60;

                return totalTime - leftTime;
            }

            function updatePassedWords(action = '+') {
                switch (action) {
                    case "+":
                        passedWords++;
                        break;
                    case "-":
                        passedWords--;
                        if (passedWords < 0) {
                            passedWords = 0;
                        }
                        break;
                }
            }

            function calculateWPM() {
                let passedTime = getPassedTime();
                let wpm = Math.ceil((passedWords * 60) / passedTime);

                $countWordsPerMinuteBox.text(wpm);
            }

            function calculateCPM(inputIndex) {
                let passedTime = getPassedTime();
                let cpm = Math.ceil((inputIndex * 60) / passedTime);
                if (cpm < 0 || cpm > 10000 || isNaN(cpm)) {
                    cpm = 0;
                }

                $countCharsPerMinuteBox.text(cpm);
            }

            function calculateAccuracy(inputIndex) {
                let accuracy = 0;
                if (lettersCount > 0) {
                    accuracy = Math.ceil(100 - ((mistakes * 100) / (inputIndex + 1)));
                }

                $countAccuracyBox.text(accuracy);
            }

            function focusOnTextarea() {
                $("textarea#test-input").focus();
            }

            function buildLastUserTestHistoryChart(data) {
                if (data.wpm.length <= 10) {
                    $(".stat").hide();
                    $("#too-low-test-history").show();
                } else {
                    let ctx = document.getElementById('lastStatChart').getContext('2d');
                    let myChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: data.datetime,
                            datasets: [{
                                label: '{{ "Words per minute"|trans }} (WPM)',
                                data: data.wpm,
                                backgroundColor: [
                                    'rgba(61, 163, 232, 0.1)',
                                ],
                                borderColor: [
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                    'rgba(61, 163, 232, 1)',
                                ],
                                borderWidth: 3
                            }]
                        },
                        options: {
                            tooltips: {
                                mode: 'x-axis',
                                intercept: true
                            },
                            hover: {
                                mode: 'nearest',
                                intersect: true
                            },
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        beginAtZero: true
                                    }
                                }]
                            }
                        }
                    });
                }
            }

            function saveResult() {
                $.post('{{ path('saveTestResult') }}', {
                    textId: $("input#text-id").val(),
                    testDuration: $testDurationBox.val(),
                    wpm: $countWordsPerMinuteBox.text(),
                    cpm: $countCharsPerMinuteBox.text(),
                    accuracy: $countAccuracyBox.text(),
                }, function (data, status) {
                    if (status === 'success') {
                        console.log('saved');
                    } else {
                        console.log(data.error);
                    }
                });
            }

            function getTestHistoryForUser() {
                $.get('{{ path('getTestHistoryForUser') }}', {
                    limit: 6
                }, function (data, status) {
                    if (status === 'success') {
                        buildLastUserTestHistoryChart(data);
                    }
                });
            }

            function initText() {
                let duration = $testDurationBox.val();
                let language = $testLanguageBox.val();
                $.get('/api/text/get/' + duration, {
                    language: language
                }, function (data, status) {
                    if (status === 'success') {
                        if (data.error !== undefined && data.error !== false) {
                            showTextLoadError();
                        } else {
                            let textId = data.textId;
                            let text = data.parsedText;
                            let wordsCount = data.wordsCount;
                            lettersCount = data.lettersCount;

                            $("input#text-id").val(textId);
                            $originalTextBox.append(text);
                            let $firstLetter = $originalTextBox.find('span.letter-0');
                            $firstLetter.addClass('current');
                            highlightKeyOnKeyboard($firstLetter.data('letter'));
                        }
                    } else {
                        showTextLoadError();
                    }
                });
            }
        });

        $("input[name='disable-finger-preview']").change(function () {
            let showTooltips = $(this).is(':checked');
            $.post("{{ path('profileAjaxDisableTooltips') }}", {
                showTooltips: showTooltips
            })
        });

        function showTextLoadError() {
            $(".test-container").hide();
            $(".test-container-error").show();
        }

        $(window).on('load', function () {
            setTimeout(function() {
                $(".preloader").hide();
                scrollToElement($("#test-wrapper"));
            }, 600);
        });
    </script>
{% endblock %}