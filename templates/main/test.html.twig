{% extends 'layouts/base.html.twig' %}

{% block one_row_content %}
    <div class="test-wrapper">
        <div class="test-settings-container" id="test-settings-container">
            <label for="test-duration">Test duration: </label>
            <select name="test-duration" id="test-duration">
                <option value="1">1 minute</option>
                <option value="3">3 minute</option>
                <option value="5">5 minute</option>
            </select>
            <div class="right">
                <span id="words-per-minute">
                    <b>Words per minute:</b> <span id="count-words-per-minute">0</span>
                </span> |
                    <span id="chars-per-minute">
                    <b>Chars per minute:</b> <span id="count-chars-per-minute">0</span>
                </span> |
                    <span id="typing-accuracy">
                    <b>Typing accuracy:</b> <span id="count-typing-accuracy">0</span>%
                </span> |
                    <span id="timer">
                    <b>Time left:</b> <span id="timer-left"></span>s
                </span>
            </div>
            <hr>
        </div>
        <div class="test-container">
            <input type="hidden" name="text-id" id="text-id" value="undefined">
            <div class="test-text-display">
                <span id="original-text"></span>
            </div>
            <p class="tesxxxx"></p>
            <textarea name="test-input" id="test-input" cols="146" rows="10" style="opacity: 0; width: 0px; height: 0px;"></textarea>
            <div class="test-keyboard-box">
                {{ keyboard|raw }}
            </div>
        </div>
    </div>
{% endblock %}

{% block two_rows %}{% endblock %}

{%block scripts %}
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"
            integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo="
            crossorigin="anonymous">
    </script>
    <script src="{{ asset('js/test.js') }}"></script>
    <script>
        $(document).ready(function () {

            let passedWords = 0;
            let isTimerStarted = false;
            let $countWordsPerMinuteBox = $("span#count-words-per-minute");
            let $countCharsPerMinuteBox = $("span#count-chars-per-minute");
            let $countAccuracyBox = $("span#count-typing-accuracy");
            let $timerLeftBox = $('#timer-left');
            let $testDurationBox = $("select#test-duration");
            let $originalTextBox = $("#original-text");

            initText();
            focusOnTextarea();
            $timerLeftBox.text($testDurationBox.val() * 60);

            $testDurationBox.on('change', function () {
                $timerLeftBox.text($(this).val() * 60);
            });

            $(".test-text-display").click(function () {
                focusOnTextarea();
            });

            $("textarea#test-input").on('input', function () {
                if (!isTimerStarted) {
                    startTimer();
                }
                compareInputWithText($(this).val());
            });

            $("textarea#test-input").keyup(function(e) {
                switch (e.keyCode) {
                    case 8:  // Backspace
                        backspaceAction($(this).val());
                        break;
                    default:
                        break;
                }
            });

            function compareInputWithText(input) {
                $originalTextBox.find('span.letter').removeClass('current');
                let inputIndex = input.length - 1;
                let $originalLetter = $originalTextBox.find('span.letter-' + inputIndex);
                let originalChar = $originalLetter.data('letter').toString();
                let inputChar = input.charAt(inputIndex).toString();

                if (originalChar === inputChar) {
                    //set letter style pass
                    $originalLetter.removeClass('current');
                    $originalLetter.addClass('pass');
                    $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '+');
                } else {
                    //set letter style wrong
                    $originalLetter.removeClass('current');
                    $originalLetter.addClass('wrong');
                    $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '-');
                }
                
                if ($originalLetter.hasClass('end-word')) {
                    updatePassedWords('+');
                }

                calculateCPM(inputIndex);

                let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));
                $nextLetter.addClass('current');

                highlightKeyOnKeyboard($nextLetter.data('letter'));
            }

            function highlightKeyOnKeyboard(letter) {
                $(".key-current").removeClass('key-current');

                let key = $(".test-keyboard-box").find(`[data-key='${letter.toLowerCase()}']`);
                key.addClass('key-current');

                let shiftKey = $(".test-keyboard-box").find(`[data-shift-key='${letter}']`);
                if (shiftKey.data('shift-key') !== undefined) {
                    shiftKey.addClass('key-current');
                    highlightShift();
                }

                if (isShiftKeyShouldBeHighlighted(letter) && letter === letter.toUpperCase()) {
                    highlightShift()
                }
            }
            
            function isShiftKeyShouldBeHighlighted(letter) {
                let forbiddenShiftHighlight = [' ', "\n", "\r", '/', '.', ','];

                if (forbiddenShiftHighlight.includes(letter)) {
                    return false;
                }

                return true;
            }

            function highlightShift() {
                let shift = $(".test-keyboard-box").find(`[data-key='shift']`);
                shift.addClass('key-current');
            }

            function backspaceAction(input) {

                let inputIndex = input.length;
                let $currentLetter = $originalTextBox.find('span.letter-' + inputIndex);
                let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));
                
                if ($currentLetter.hasClass('end-word')) {
                    updatePassedWords('-');
                }

                //Remove all current letter classes
                if ($currentLetter.hasClass('pass')) {
                    $currentLetter.removeClass('pass');
                }

                if ($currentLetter.hasClass('current')) {
                    $currentLetter.removeClass('current');
                }

                if ($currentLetter.hasClass('wrong')) {
                    $currentLetter.removeClass('wrong');
                }

                //Remove all next letter classes
                if ($nextLetter.hasClass('current')) {
                    $nextLetter.removeClass('current');
                }

                //Set previous letter as current
                $currentLetter.addClass('current');
            }

            function startTimer() {
                isTimerStarted = true;

                let _Seconds = parseInt($timerLeftBox.text());
                interval = setInterval(function() {
                    if (_Seconds > 0) {
                        _Seconds--;
                        $timerLeftBox.text(_Seconds);
                        calculateWPM();
                    } else {
                        stopTimer(interval);
                        alert('WPM: ' + $countWordsPerMinuteBox.text());
                        saveResult();
                        window.location.reload();
                    }
                }, 1000);

                setTimeout(stopTimer, 10000);
            }

            function stopTimer(interval) {
                clearInterval(interval);
            }
            
            function getPassedTime() {
                let leftTime = $timerLeftBox.text();
                let totalTime = $testDurationBox.val() * 60;
                let passedTime = totalTime - leftTime;

                return passedTime;
            }

            function updatePassedWords(action = '+') {
                switch (action) {
                    case "+":
                        passedWords++;
                        break;
                    case "-":
                        passedWords--;
                        if (passedWords < 0) {
                            passedWords = 0;
                        }
                        break;
                }
            }
            
            function calculateWPM() {

                let passedTime = getPassedTime();
                let wpm = Math.ceil((passedWords * 60) / passedTime);

                $countWordsPerMinuteBox.text(wpm);
            }

            function calculateCPM(inputIndex) {

                let passedTime = getPassedTime();
                let cpm = Math.ceil((inputIndex * 60) / passedTime);

                if (cpm < 0) {
                    cpm = 0;
                }

                $countCharsPerMinuteBox.text(cpm);
            }

            function focusOnTextarea() {
                $("textarea#test-input").focus();
            }

            function saveResult() {
                $.post('{{ path('saveTestResult') }}', {
                    textId: $("input#text-id").val(),
                    testDuration: $testDurationBox.val(),
                    wpm: $countWordsPerMinuteBox.text(),
                    cpm: $countCharsPerMinuteBox.text(),
                    accuracy: $countAccuracyBox.text(),
                }, function (data, status) {
                    if (status === 'success') {
                        console.log('saved');
                    } else {
                        console.log(data.error);
                    }
                });
            }

            function initText() {
                $.get('/api/text/get/1', {}, function (data, status) {
                    if (status === 'success') {
                        let textId = data.textId;
                        let text = data.parsedText;
                        let wordsCount = data.wordsCount;
                        let lettersCount = data.lettersCount;

                        $("input#text-id").val(textId);
                        $originalTextBox.append(text);
                        let $firstLetter = $originalTextBox.find('span.letter-0');
                        $firstLetter.addClass('current');
                        highlightKeyOnKeyboard($firstLetter.data('letter'));
                    }
                });
            }
        })
    </script>
{% endblock %}