{% extends 'layouts/base.html.twig' %}

{% block meta %}
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="pragma" content="no-cache">
{% endblock %}

{% block one_row_content %}
    <div class="test-wrapper">
{#        <button id="myBtn">Open</button>#}
        <div class="test-settings-container" id="test-settings-container">
            <label for="test-duration">Test duration: </label>
            <select name="test-duration" id="test-duration">
                <option value="1" {% if app.request.get('duration') == 1 %} selected {% endif %}>1 minute</option>
                <option value="3" {% if app.request.get('duration') == 3 %} selected {% endif %}>3 minute</option>
                <option value="5" {% if app.request.get('duration') == 5 %} selected {% endif %}>5 minute</option>
            </select>
            <div class="right">
                <span id="words-per-minute">
                    <b>Words per minute:</b> <span id="count-words-per-minute">0</span>
                </span> |
                    <span id="chars-per-minute">
                    <b>Chars per minute:</b> <span id="count-chars-per-minute">0</span>
                </span> |
                    <span id="typing-accuracy">
                    <b>Typing accuracy:</b> <span id="count-typing-accuracy">0</span>%
                </span> |
                    <span id="timer">
                    <b>Time left:</b> <span id="timer-left"></span>s
                </span>
            </div>
            <hr>
        </div>
        <div class="test-container">
            <input type="hidden" name="text-id" id="text-id" value="undefined">
            <div class="test-text-display" id="test-text-display">
                <span id="original-text"></span>
            </div>
            <p class="tesxxxx"></p>
            <textarea name="test-input" id="test-input" cols="146" rows="10" style="opacity: 0; width: 0px; height: 0px;"></textarea>
            <div class="test-keyboard-box">
                {{ keyboard|raw }}
            </div>
        </div>
    </div>

    <div id="testStatModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Your test result</h2>
            </div>
            <div class="modal-body">
                <p>
                    <b>Words per minute (WPM):</b> <span id="modal-test-result-wpm">0</span>
                </p>
                <p>
                    <b>Chars per minute (CPM):</b> <span id="modal-test-result-cpm">0</span>
                </p>
                <p>
                   <b>Typing accuracy:</b> <span id="modal-test-result-accuracy">100</span>%
                </p>
                {% if app.user %}
                    <canvas id="lastStatChart" height="100"></canvas>

                    <span style="font-size: 14px;">
                        View advanced statistic in the <a href="{{ path('profileIndex') }}" class="link">profile</a>.
                    </span>
                {% else %}
                    <p>
                        If you want to view your typing statistic, please
                        <a href="{{ path('app_login') }}" class="link">log in</a> or
                        <a href="{{ path('register') }}" class="link">register</a>
                        .
                    </p>
                {% endif %}
            </div>
            <hr>
            <div class="modal-footer">
                <button class="btn close right">Ok</button>
            </div>
        </div>
    </div>
{% endblock %}

{% block two_rows %}{% endblock %}

{%block scripts %}
    <link rel="stylesheet" href="{{ asset('chartjs/Chart.css') }}">
    <script src="{{ asset('chartjs/Chart.js') }}"></script>
    <script src="{{ asset('js/test.js') }}"></script>
    <script>
        $(document).ready(function () {
            let lettersCount = 0;
            let passedWords = 0;
            let mistakes = 0;
            let isTimerStarted = false;
            let positionToScrollDown = 195;
            let positionToScrollUp = 130;
            let scrollPx = 64;
            let $testTextDisplayBox = $("#test-text-display");
            let $countWordsPerMinuteBox = $("span#count-words-per-minute");
            let $countCharsPerMinuteBox = $("span#count-chars-per-minute");
            let $countAccuracyBox = $("span#count-typing-accuracy");
            let $timerLeftBox = $('#timer-left');
            let $testDurationBox = $("select#test-duration");
            let $originalTextBox = $("#original-text");

            let testStatModal = $("#testStatModal");
            let testStatModalCloseSpan = $(".close");

            let btn = $("#myBtn");
            btn.click(function () {
                showTestStatModal()
            });

            testStatModalCloseSpan.click(function () {
                hideTestStatModal();
            });

            $testDurationBox.change(function () {
                insertParam('duration', $(this).val());
                window.location.href;
            });

            $(window).on('click', function(event){
                if (event.target.id === 'testStatModal') {
                    hideTestStatModal();
                }
            });

            initText();
            focusOnTextarea();
            $timerLeftBox.text($testDurationBox.val() * 60);

            $testDurationBox.on('change', function () {
                $timerLeftBox.text($(this).val() * 60);
            });

            $(".test-text-display").click(function () {
                focusOnTextarea();
            });

            $("textarea#test-input").on('input', function () {
                if (!isTimerStarted) {
                    startTimer();
                }
                compareInputWithText($(this).val());
            });

            $("textarea#test-input").keydown(function(e) {
                switch (e.keyCode) {
                    case 8:  // Backspace
                        backspaceAction($(this).val());
                        break;
                    default:
                        break;
                }
            });

            function compareInputWithText(input) {
                $originalTextBox.find('span.letter').removeClass('current');
                let inputIndex = input.length - 1;
                let $originalLetter = $originalTextBox.find('span.letter-' + inputIndex);
                let originalChar = $originalLetter.data('letter').toString();
                let inputChar = input.charAt(inputIndex).toString();

                if (originalChar === inputChar) {
                    //set letter style pass
                    $originalLetter.removeClass('current');
                    $originalLetter.addClass('pass');
                    $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '+');
                } else {
                    //set letter style wrong
                    if (!$originalLetter.hasClass('wrong')) {
                        mistakes++;
                    }
                    $originalLetter.removeClass('current');
                    $originalLetter.addClass('wrong');
                    $("p.tesxxxx").text(originalChar + ' : ' + inputChar + '-');
                }

                if ($originalLetter.hasClass('end-word')) {
                    updatePassedWords('+');
                }

                calculateCPM(inputIndex);
                calculateAccuracy(inputIndex);

                let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));
                $nextLetter.addClass('current');

                scrollTestDisplayBox($nextLetter.position().top);
                highlightKeyOnKeyboard($nextLetter.data('letter'));
            }

            function scrollTestDisplayBox(letterPosition) {
                if (letterPosition > positionToScrollDown) {
                    $testTextDisplayBox.scrollTop($testTextDisplayBox.scrollTop() + scrollPx)
                } else if (letterPosition < positionToScrollUp) {
                    $testTextDisplayBox.scrollTop($testTextDisplayBox.scrollTop() - scrollPx)
                }
            }

            function highlightKeyOnKeyboard(letter) {
                $(".key-current").removeClass('key-current');

                let key = $(".test-keyboard-box").find(`[data-key='${letter.toLowerCase()}']`);
                key.addClass('key-current');

                let shiftKey = $(".test-keyboard-box").find(`[data-shift-key='${letter}']`);
                if (shiftKey.data('shift-key') !== undefined) {
                    shiftKey.addClass('key-current');
                    highlightShift();
                }

                if (isShiftKeyShouldBeHighlighted(letter) && letter === letter.toUpperCase()) {
                    highlightShift()
                }
            }

            function isShiftKeyShouldBeHighlighted(letter) {
                let forbiddenShiftHighlight = [' ', "\n", "\r", '/', '.', ','];

                if (forbiddenShiftHighlight.includes(letter)) {
                    return false;
                }

                return true;
            }

            function highlightShift() {
                let shift = $(".test-keyboard-box").find(`[data-key='shift']`);
                shift.addClass('key-current');
            }

            function backspaceAction(input) {
                let inputIndex = input.length - 1;
                let $currentLetter = $originalTextBox.find('span.letter-' + inputIndex);
                let $nextLetter = $originalTextBox.find('span.letter-' + (inputIndex + 1));

                if ($currentLetter.hasClass('end-word')) {
                    updatePassedWords('-');
                }

                //Remove all current letter classes
                if ($currentLetter.hasClass('pass')) {
                    $currentLetter.removeClass('pass');
                }

                if ($currentLetter.hasClass('current')) {
                    $currentLetter.removeClass('current');
                }

                if ($currentLetter.hasClass('wrong')) {
                    mistakes--;
                    $currentLetter.removeClass('wrong');
                }

                //Remove all next letter classes
                if ($nextLetter.hasClass('current')) {
                    $nextLetter.removeClass('current');
                }

                if ($nextLetter.hasClass('wrong')) {
                    $nextLetter.removeClass('wrong');
                }

                //Set previous letter as current
                $currentLetter.addClass('current');
            }

            function startTimer() {
                isTimerStarted = true;

                let _Seconds = parseInt($timerLeftBox.text());
                interval = setInterval(function() {
                    if (_Seconds > 0) {
                        _Seconds--;
                        $timerLeftBox.text(_Seconds);
                        calculateWPM();
                    } else {
                        stopTimer(interval);
                        $("span#modal-test-result-wpm").text($countWordsPerMinuteBox.text());
                        $("span#modal-test-result-cpm").text($countCharsPerMinuteBox.text());
                        $("span#modal-test-result-accuracy").text($countAccuracyBox.text());
                        showTestStatModal();
                    }
                }, 1000);

                setTimeout(stopTimer, 10000);
            }

            function stopTimer(interval) {
                clearInterval(interval);
            }

            function showTestStatModal() {
                saveResult();
                getTestHistoryForUser();
                testStatModal.css("display", "block");
            }

            function hideTestStatModal() {
                testStatModal.css("display", "none");
                window.location.reload();
            }

            function getPassedTime() {
                let leftTime = $timerLeftBox.text();
                let totalTime = $testDurationBox.val() * 60;
                let passedTime = totalTime - leftTime;

                return passedTime;
            }

            function updatePassedWords(action = '+') {
                switch (action) {
                    case "+":
                        passedWords++;
                        break;
                    case "-":
                        passedWords--;
                        if (passedWords < 0) {
                            passedWords = 0;
                        }
                        break;
                }
            }

            function calculateWPM() {
                let passedTime = getPassedTime();
                let wpm = Math.ceil((passedWords * 60) / passedTime);

                $countWordsPerMinuteBox.text(wpm);
            }

            function calculateCPM(inputIndex) {
                let passedTime = getPassedTime();
                let cpm = Math.ceil((inputIndex * 60) / passedTime);
                if (cpm < 0 || cpm > 10000) {
                    cpm = 0;
                }

                $countCharsPerMinuteBox.text(cpm);
            }

            function calculateAccuracy(inputIndex) {
                let accuracy = 0;
                if (lettersCount > 0) {
                    accuracy = Math.ceil(100 - ((mistakes * 100) / (inputIndex + 1)));
                }

                $countAccuracyBox.text(accuracy);
            }

            function focusOnTextarea() {
                $("textarea#test-input").focus();
            }

            function buildLastUserTestHistoryChart(data) {
                let ctx = document.getElementById('lastStatChart').getContext('2d');
                let myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.datetime,
                        datasets: [{
                            label: 'Words per minute (WPM)',
                            data: data.wpm,
                            backgroundColor: [
                                'rgba(61, 163, 232, 0.1)',
                            ],
                            borderColor: [
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                                'rgba(61, 163, 232, 1)',
                            ],
                            borderWidth: 3
                        }]
                    },
                    options: {
                        tooltips: {
                            mode: 'x-axis',
                            intercept: true
                        },
                        hover: {
                            mode: 'nearest',
                            intersect: true
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
            }

            function saveResult() {
                $.post('{{ path('saveTestResult') }}', {
                    textId: $("input#text-id").val(),
                    testDuration: $testDurationBox.val(),
                    wpm: $countWordsPerMinuteBox.text(),
                    cpm: $countCharsPerMinuteBox.text(),
                    accuracy: $countAccuracyBox.text(),
                }, function (data, status) {
                    if (status === 'success') {
                        console.log('saved');
                    } else {
                        console.log(data.error);
                    }
                });
            }

            function getTestHistoryForUser() {
                $.get('{{ path('getTestHistoryForUser') }}', {
                    limit: 3
                }, function (data, status) {
                    if (status === 'success') {
                        buildLastUserTestHistoryChart(data);
                    }
                });
            }

            function initText() {
                let duration = $testDurationBox.val();
                $.get('/api/text/get/' + duration, {}, function (data, status) {
                    if (status === 'success') {
                        let textId = data.textId;
                        let text = data.parsedText;
                        let wordsCount = data.wordsCount;
                        lettersCount = data.lettersCount;

                        $("input#text-id").val(textId);
                        $originalTextBox.append(text);
                        let $firstLetter = $originalTextBox.find('span.letter-0');
                        $firstLetter.addClass('current');
                        highlightKeyOnKeyboard($firstLetter.data('letter'));
                    }
                });
            }
        })
    </script>
{% endblock %}